{
    "Check/Handle Error": {
        "prefix": "aererr = AER_TRY;",
        "body": [
            "aererr = AER_TRY;",
            "${1:/* operation */}",
            "switch (aererr) {",
            "\t${2:/* handle errors */}",
            "\tdefault:",
            "\t\t${0: /* handle success */}",
            "}",
        ],
        "description": "Perform an operation and handle errors."
    },
    "Get/Set/Add Inst Vec": {
        "prefix": [
            "float x, y;",
            "AERInstanceGetPosition",
            "AERInstanceGetMotion",
            "AERInstanceGetSpriteScale",
        ],
        "body": [
            "float ${1:x}, ${2:y};",
            "AERInstanceGet${3|Position,Motion,SpriteScale|}(${4:target}, &$1, &$2);",
            "${5:AERInstance${6|Set,Add|}$3(${7:other}, $1, $2);}$0",
        ],
        "description": "Get (and optionally set or add to) an instance's 2D vector."
    },
    "Get Inst AABB": {
        "prefix": [
            "float left, top, right, bottom;",
            "AERInstanceGetBoundingBox",
        ],
        "body": [
            "float ${1:left}, ${2:top}, ${3:right}, ${4:bottom};",
            "AERInstanceGetBoundingBox(${5:target}, &$1, &$2, &$3, &$4);",
        ],
        "description": "Get an instance's bounding box."
    },
    "Obj Event Listener": {
        "prefix": [
            "static bool CreateListener",
            "static bool DestroyListener",
            "static bool AlarmListener",
            "static bool StepListener",
            "static bool PreStepListener",
            "static bool PostStepListener",
            "static bool CollisionListener",
            "static bool AnimationEndListener",
            "static bool DrawListener",
            "static bool GUIDrawListener",
        ],
        "body": [
            "static bool ${1|Create,Destroy,Alarm,Step,PreStep,PostStep,Collision,AnimationEnd,Draw,GUIDraw|}Listener(",
            "\t\tAEREvent *event,",
            "\t\tAERInstance *target,",
            "\t\tAERInstance *other",
            ") {",
            "\tif (!event->handle(event->next, target, other))",
            "\t\treturn false;",
            "",
            "\t${0:/* code */}",
            "",
            "\treturn true;",
            "}",
        ],
        "description": "Idiomatic object event listener."
    },
    "Get Obj Children": {
        "prefix": [
            "size_t numObjs",
            "AERObjectGetChildren",
        ],
        "body": [
            "size_t ${1:numObjs} = AERObjectGetChildren(${2:objIdx}, ${3|true,false|}, 0, NULL);",
            "int32_t *${4:objBuf} = ${5|malloc,alloca|}($1 * sizeof(int32_t));",
            "AERObjectGetChildren($2, $3, $1, $4);",
            "${0:/* code */}",
            "${6:free($4);}",
        ],
        "description": "Get object childern."
    },
    "Get All Insts": {
        "prefix": [
            "size_t numInsts",
            "AERInstanceGetAll",
        ],
        "body": [
            "size_t ${1:numInsts} = AERInstanceGetAll(0, NULL);",
            "AERInstance **${2:instBuf} = ${3|malloc,alloca|}($1 * sizeof(AERInstance *));",
            "AERInstanceGetAll($1, $2);",
            "${0:/* code */}",
            "${4:free($2);}",
        ],
        "description": "Get all instances in the current room."
    },
    "Get Obj Insts": {
        "prefix": [
            "size_t numInsts",
            "AERInstanceGetByObject",
        ],
        "body": [
            "size_t ${1:numInsts} = AERInstanceGetByObject(${2:objIdx}, ${3|true,false|}, 0, NULL);",
            "AERInstance **${4:instBuf} = ${5|malloc,alloca|}($1 * sizeof(AERInstance *));",
            "AERInstanceGetByObject($2, $3, $1, $4);",
            "${0:/* code */}",
            "${6:free($4);}",
        ],
        "description": "Get instances of object."
    },
    "Get Inst HLD Locs": {
        "prefix": [
            "size_t numLocs",
            "AERInstanceGetHLDLocals",
        ],
        "body": [
            "size_t ${1:numLocs} = AERInstanceGetHLDLocals(${2:target}, 0, NULL);",
            "const char **${3:locBuf} = ${4|malloc,alloca|}($1 * sizeof(const char *));",
            "AERInstanceGetHLDLocals($2, $1, $3);",
            "${0:/* code */}",
            "${5:free($3);}",
        ],
        "description": "Get names of instance locals."
    },
    "Parse Conf List": {
        "prefix": [
            "size_t numConf",
            "AERConfGetBools",
            "AERConfGetInts",
            "AERConfGetDoubles",
            "AERConfGetStrings",
        ],
        "body": [
            "aererr = AER_TRY;",
            "size_t ${1:numConf} = AERConfGet${2|Bools,Ints,Doubles,Strings|}(${3:key}, 0, NULL);",
            "${4|bool ,int64_t ,double ,const char *|}*${5:confBuf} = ${6|malloc,alloca|}($1 * sizeof($4));",
            "aererr = AER_TRY;",
            "AERConfGet$2($3, $1, $5);",
            "switch (aererr) {",
            "\tcase AER_FAILED_LOOKUP:",
            "\t\t${8:/* handle undefined key */}",
            "\t\tbreak;",
            "\tcase AER_FAILED_PARSE:",
            "\t\t${9:/* handle incorrect type */}",
            "\t\tbreak;",
            "\tdefault:",
            "\t\t${0:/* handle success */}",
            "}",
            "${7:free($5);}",
        ],
        "description": "Parse configuration list."
    },
}